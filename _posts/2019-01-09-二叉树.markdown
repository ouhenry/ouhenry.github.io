---
layout: post
title:  "二叉树"
date:   2019-01-09 16:34:48 +0800
categories: 数据结构
---

**树的定义：**

- 子树是不相交的；
- 出了根结点外，每个结点有且仅有一个父结点；
- 一颗N个结点的树有N-1条边

代码：

    typedef struct TNode *Position;
	typedef Position BinTree; /* 二叉树类型 */
	struct TNode{ /* 树结点定义 */
    	ElementType Data; /* 结点数据 */
    	BinTree Left;     /* 指向左子树 */
    	BinTree Right;    /* 指向右子树 */
	};
	

**二叉树的定义：**

一个有穷的结点集合。这个集合可以为空
若不为空，则它是由根节点和称为其左子树TL和右子树TR的两不相交的二叉树组成。

**二叉树的几个重要性质**


- 一个二叉树第i层的最大结点数为：*2^(i-1), i>=1*。
- 深度为K的二叉树有最大节点总数为：*2^k - 1, k >=1*。
- 对任何非空二叉树T， 若n0表示叶结点的个数、n2是度为2的非叶结点个数，那么两者满足关系*n0 = n2 + 1*。

**重要操作：**

1. Boolean IsEmpty(BinTree BT): 判别BT是否为空；
2. void Traversal(BinTree BT):遍历，按某顺序访问每个结点；
3. BinTree CreatBinTree(): 创建一个二叉树。

常用的遍历方法有：

- void PreOrderTraversal(BinTree BT):先序---根、左子树、右子树
- void InOrderTraversal(BinTree BT):中序---左子树、根、右子树；
- void PostOrderTraversal(BinTree BT):后序---左子树、右子树、根
- void LevelOrderTraversal(BinTree BT):层次遍历，从上到下、从左到右

##二叉树的存储结构

###顺序存储结构
按从上至下、从左到右顺序存储

n个结点的完全二叉树的结点父子关系：


- 非根结点（序号i>1）的父节点的序号是[i/2];
- 结点（序号为i）的左孩子结点的序号是2i,(若2i<=n,否则没有左孩子)；
- 结点（序号为i）的右孩子结点的序号2i+1,(若2i+1<=n, 否则没有右孩子)


(1)先序遍历

	void PreOrderTraversal(BinTree BT)
	{
		if(BT){
			printf("%d"，BT->Data);
			PreOrderTraversal(BT->Left);
			PreOrderTraversal(BT->Right);
		}
	}

(2)中序遍历

	void InOrderTraversal(BinTree BT)
	{
		if(BT){
			InOrderTraversal(BT->Left);
			printf("%d",BT->Data);
			InOrderTraversal(BT->Right);
		}
	}

(3)后序遍历

	void PostOrderTraversal(BinTree BT)
	{
		if(BT){
			PostOrderTraversal(BT->Left);
			PostOrderTraversal(BT->Right);
			printf("%d", BT->Data);
		}
	}

先序、中序和后序遍历过程：遍历过程中经过结点的*路线一样*，只是*访问各结点的时机不同*。

**中序遍历非递归遍历算法**

- 遇到一个结点，就把它压栈，并去遍历它的左子树；
- 当左子树遍历结束后，从栈顶弹出这个结点并访问它；
- 然后按其右指针再去中序遍历该结点的右子树。

代码：

	void InOrderTraversal(BinTree BT)
	{
		BinTree T = BT;
		Stack S = CreatStack(MaxSize);
		while(T || !IsEmpty(S)){
			while(T){
				Push(S,T);
				T = T->Left;
			}
			if(!IsEmpty(S)){
				T = Pop(S);
				printf("%5d", T->Data);
				T = T->Right;
			}
		}
	}

层序遍历

>队列实现: 遍历从根节点开始，首先将根节点入队，然后开始执行循环：结点出队、访问该结点、其左右儿子入队

基本过程：

1. 从队列中取出一个元素；
2. 访问该元素所指几点；
3. 若该元素所指结点的左、右结点非空，则将其左、右孩子的指针顺序入队。

代码：

	void LevelorderTraversal ( BinTree BT )
	{ 
    	Queue Q; 
    	BinTree T;
    	if ( !BT ) return; /* 若是空树则直接返回 */
     
    	Q = CreatQueue(); /* 创建空队列Q */
    	AddQ( Q, BT );
    	while ( !IsEmpty(Q) ) {
        	T = DeleteQ( Q );
        	printf("%d ", T->Data); /* 访问取出队列的结点 */
        	if ( T->Left )   AddQ( Q, T->Left );
        	if ( T->Right )  AddQ( Q, T->Right );
    	}
	}